image: # Configuration for TeamCity server image
  repository: jetbrains/teamcity-server
  tag: latest
  pullPolicy: Always
  imagePullSecrets: []

agentNamespace: wombat-agents #Namespace for agents

proxy: #HAProxy configuration
  replicas: 2
  image:
    repository: haproxy
    tag: "3.0"
    pullPolicy: IfNotPresent
    imagePullSecrets: []
  resources:
    requests:
      cpu: "10m"
      memory: "80Mi"
  startupProbe:
    httpGet:
      path: /login.html
      port: http
      scheme: HTTP
    failureThreshold: 120
    periodSeconds: 5
  livenessProbe: ~
  ingress:
    hosts: #HA Hostnames which will be accessible after initialization
      - teamcity.example.com
    ingressClassName: nginx
    annotations: ~

teamcity: #TeamCity configuration
  namespace: "wombat-tc-server" # Server namespace
  vcsRootConfiguration:
    enabled: true #If you want to have preconfigured Root project
    ghAccess:
      auth: #Type of access
        cert: false #Via SSH key
        ghAnnonumous: true #Annonumous
        password: false # Via PAT token(not recommended)
      configuration:
        url: https://github.com/netKore/teamcity-config.git #git@github.com:netKore/teamcity-config.git
        #If https -> only annonumous supported in this configrutaion
        #If ssh -> private certificate path required
        certAuth:
          #cert encoded base64
          cert: ~
        tokenAuth:
          token: ~
        #For token and cert better to use --set argument in HELM command
        branch: "main" #Branch from which TeamCity have to take custom configuration
        username: "netKore" #Github username, required only for PAT authentification

  resources: #Resources for TeamCity server
    requests:
      cpu: 500m
      memory: 2048Mi
  env:
    TEAMCITY_SERVER_MEM_OPTS: -Xms512m -Xmx2048m
    POD_NAME:
      valueFrom:
        fieldRef:
          fieldPath: metadata.name
  livenessProbe:
    httpGet:
      path: /healthCheck/healthy
      port: http
      scheme: HTTP
    failureThreshold: 3
    periodSeconds: 30
  readinessProbe:
    httpGet:
      path: /healthCheck/ready
      port: http
      scheme: HTTP
    failureThreshold: 2
    periodSeconds: 10
  ports:
  - containerPort: 8111
    name: http
    protocol: TCP
  affinity: {}
  tolerations:
    - key: "{{ $.Release.Name }}"
      operator: Exists
  topologySpreadConstraints: #part of HA
    - maxSkew: 1
      topologyKey: topology.kubernetes.io/zone
      whenUnsatisfiable: ScheduleAnyway
      labelSelector:
        matchLabels:
          app: "{{ $.Release.Name }}"
    - maxSkew: 1
      topologyKey: kubernetes.io/hostname
      whenUnsatisfiable: ScheduleAnyway
      labelSelector:
        matchLabels:
          app: "{{ $.Release.Name }}"
  nodes:
  - ingress:
      host: teamcity-main.example.com #Initial URL
    ## @param temacity.nodes[<index>].env used to override env per node
    # env:
    #   ROOT_URL: "http://{{ $.Release.Name }}-{{ $index }}.{{ $.Release.Name }}-headless.{{ $.Release.Namespace}}:8111"
    #   NODE_ID: "{{ $.Release.Name }}-{{ $index }}"
    responsibilities: #ROLES
    - MAIN_NODE
    - CAN_PROCESS_BUILD_TRIGGERS
    - CAN_PROCESS_USER_DATA_MODIFICATION_REQUESTS
    - CAN_CHECK_FOR_CHANGES
    - CAN_PROCESS_BUILD_MESSAGES
  - responsibilities:
    - CAN_PROCESS_BUILD_TRIGGERS
    - CAN_PROCESS_USER_DATA_MODIFICATION_REQUESTS
    - CAN_CHECK_FOR_CHANGES
    - CAN_PROCESS_BUILD_MESSAGES

serviceAccount: #Service account, need it to communicate with Agents Namespace
  enabled: true
  annotations: {}
  agentRBAC:
      enabled: true

pdb: #PodDistributionBudget - part of HA
  enabled: true
  minAvailable: 1

pvc: #Persistent volume Claim configuration
  name: teamcity-server-data
  annotations:
    helm.sh/resource-policy: keep
  storageClassName: standard
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 4Gi

persistence: #Configuration for PV (Using HostPath Volumes Only for PoC)
  enabled: true
  name: teamcity-server-pv
  annotations:
    helm.sh/resource-policy: keep
  storageClassName: standard
  accessModes:
    - ReadWriteMany
  size: 100Gi
  hostPath: "/www" #Should be the same as in kind configuration (ha_kind file: containerPath param)

ephemeral: #Ephemeral storages configuration
  temp:
    enabled: false
    annotations: {}
    storageClassName: standard
    accessModes:
      - ReadWriteMany
    resources:
      requests:
        storage: 4Gi
  logs:
    enabled: false
    annotations: {}
    storageClassName: standard
    accessModes:
      - ReadWriteMany
    resources:
      requests:
        storage: 4Gi
  cache:
    enabled: false
    annotations: {}
    storageClassName: standard
    accessModes:
      - ReadWriteMany
    resources:
      requests:
        storage: 4Gi

database: #Database configuration
  host: "10.0.2.15"
  name: "postgres"
  user: "postgres"
  password: "qazwsx"


secrets: #If you want to mount Secret(s) to TC server
  datadirConfig:
    database.properties: | 
        connectionUrl=jdbc:postgresql://{{ $.Values.database.host }}/{{ .Values.database.name}}?allowPublicKeyRetrieval=true&useSSL=false
        connectionProperties.user={{ $.Values.database.user }}
        connectionProperties.password={{ $.Values.database.password }}
        maxConnections=50
configMap: #If you want to mount ConfigMap(s) to TC server
  datadirConfig:
    #internal.properties configuration file is required to use DefaultServiceAccount() feature.
    internal.properties: | 
        teamcity.kubernetes.localServiceAccount.enable=true
#    main-config.xml: |
#        <?xml version="1.0" encoding="UTF-8"?>
#        <!DOCTYPE server SYSTEM "main-config.dtd">
#
#        <server uuid="">
#          <version number="1021" />
#          <db-compact enabled="true">
#            <scheduler cron="0 0 3 * * ?" />
#          </db-compact>
#          <artifacts maxArtifactSize="314572800" artifact-paths="system/artifacts" maxArtifactsNumber="1000" />
#          <domain-isolation protection-enabled="true" />
#          <git nativeOperationsEnabled="true" />
#          <server rootURL="http://teamcity.local.dev:80">
#          </server>
#        </server>
